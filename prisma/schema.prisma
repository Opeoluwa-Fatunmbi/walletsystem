//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id String @id() @db.Uuid() @unique() @default(uuid())
    createdAt DateTime @map(name: "created_at") @default(now())
    updatedAt DateTime @map(name: "updated_at") @updatedAt()
    /// @length(max: 50, message: '50 characters max')
    firstName String @map(name: "first_name")
    /// @length(max: 50, message: '50 characters max')
    lastName String @map(name: "last_name")
    /// @length(min: 5, message: '5 characters min')
    email String
    /// @length(min: 8, message: '8 characters min')
    /// @length(max: 20, message: '20 characters max')
    password String
    isEmailVerified Boolean @map(name: "is_email_verified") @default(false)
    isSuperuser Boolean @map(name: "is_superuser") @default(false)
    isStaff Boolean @map(name: "is_staff") @default(false)
    termsAgreement Boolean @map(name: "terms_agreement") @default(false)
    avatarId String? @db.Uuid() @map(name: "avatar_id")
    avatar FileModel? @relation(fields: [avatarId], references: [id], onDelete: SetNull)
    access String?
    refresh String?
    reviews Review[]
    user Otp?
    listings Listing[]
    bids Bid[]
    watchlists Watchlist[]

    @@map("users")
    @@unique([email])
}

model GuestUser {
    id String @id() @db.Uuid() @unique() @default(uuid())
    createdAt DateTime @map(name: "created_at") @default(now())
    updatedAt DateTime @map(name: "updated_at") @updatedAt()
    watchlists Watchlist[]

    @@map("guest_users")
}

model Otp {
    id String @id() @db.Uuid() @unique() @default(uuid())
    createdAt DateTime @map(name: "created_at") @default(now())
    updatedAt DateTime @map(name: "updated_at") @updatedAt()
    userId String @db.Uuid() @unique() @map(name: "user_id")
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    code Int

    @@map("otps")
}

